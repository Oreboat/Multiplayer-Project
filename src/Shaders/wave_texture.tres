[gd_resource type="VisualShader" load_steps=3 format=3 uid="uid://cd6t7iwwg2aih"]

[sub_resource type="VisualShaderNodeGlobalExpression" id="VisualShaderNodeGlobalExpression_e3fx6"]
size = Vector2(1120.91, 467.261)
expression = "const float TAU = 6.28318530718;

/* Generic Noise 3 (hash based) by PatricioGonzalezVivo
@ https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
|----------------------------------------------------------------*/
float hash(float n) {
	return fract(sin(n) * 1e4);
	}
/*<https://www.shadertoy.com/view/4dS3Wd>
By Morgan McGuire @morgan3d, http://graphicscodex.com*/

float hashNoise3(vec3 x) {
	const vec3 step = vec3(110, 241, 171);

	vec3 i = floor(x);
	vec3 f = fract(x);
 
    float n = dot(i, step);

	vec3 u = f * f * (3.0 - 2.0 * f);
	return mix(mix(mix( hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x),
                   mix( hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y),
               mix(mix( hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x),
                   mix( hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);
}


/* === Based on The Blender Foundation shader
@ https://git.blender.org/gitweb/gitweb.cgi/blender.git/blob/HEAD:/source/blender/gpu/shaders/material/gpu_shader_material_tex_wave.glsl
______________________________________________________________________________________________________________________________________*/

/* [ type = 0 (rings) | type = 1 (bands) ], [ profile = 0 (sine) | profile = 1 (saw) | profile = 2 (triangle) ] */
float waveTexture(vec3 point_in, float scale, int type, float distortion, float phase, int profile) {
    point_in = (point_in + 0.000001) * 0.999999; //prevent precision issues on unit coordinates
    point_in = (scale != 0.0) ? (point_in * scale) : point_in;
    float n = 0.0;

    /*-Type: rings (Spherical) */
    if (type == 0) {
        vec3 rp = point_in;
        n = length(rp) * 20.0;
    }
    /*-Type: bands (Diagonal)*/
    else if (type == 1) {
        n = (point_in.x + point_in.y + point_in.z) * 10.0;
    }

    n += phase;
    if (distortion != 0.0) {
        n = n + (distortion * hashNoise3(point_in) * 2.0 - 1.0);
    }

    /*-Profile: sine */
    if (profile == 0) {
        return 0.5 + 0.5 * sin(n - TAU);
    }

    /*-Profile: saw */
    else if (profile == 1) {
        n /= TAU ;
        return n - floor(n);
    }

    else {
        n /= TAU;
        return abs(n - floor(n + 0.5)) * 2.0;
    }
}"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_2ofno"]
size = Vector2(250, 150)

[resource]
code = "shader_type spatial;


// GlobalExpression:0
	const float TAU = 6.28318530718;
	
	/* Generic Noise 3 (hash based) by PatricioGonzalezVivo
	@ https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
	|----------------------------------------------------------------*/
	float hash(float n) {
		return fract(sin(n) * 1e4);
		}
	/*<https://www.shadertoy.com/view/4dS3Wd>
	By Morgan McGuire @morgan3d, http://graphicscodex.com*/
	
	float hashNoise3(vec3 x) {
		const vec3 step = vec3(110, 241, 171);
	
		vec3 i = floor(x);
		vec3 f = fract(x);
	 
	    float n = dot(i, step);
	
		vec3 u = f * f * (3.0 - 2.0 * f);
		return mix(mix(mix( hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x),
	                   mix( hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y),
	               mix(mix( hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x),
	                   mix( hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);
	}
	
	
	/* === Based on The Blender Foundation shader
	@ https://git.blender.org/gitweb/gitweb.cgi/blender.git/blob/HEAD:/source/blender/gpu/shaders/material/gpu_shader_material_tex_wave.glsl
	______________________________________________________________________________________________________________________________________*/
	
	/* [ type = 0 (rings) | type = 1 (bands) ], [ profile = 0 (sine) | profile = 1 (saw) | profile = 2 (triangle) ] */
	float waveTexture(vec3 point_in, float scale, int type, float distortion, float phase, int profile) {
	    point_in = (point_in + 0.000001) * 0.999999; //prevent precision issues on unit coordinates
	    point_in = (scale != 0.0) ? (point_in * scale) : point_in;
	    float n = 0.0;
	
	    /*-Type: rings (Spherical) */
	    if (type == 0) {
	        vec3 rp = point_in;
	        n = length(rp) * 20.0;
	    }
	    /*-Type: bands (Diagonal)*/
	    else if (type == 1) {
	        n = (point_in.x + point_in.y + point_in.z) * 10.0;
	    }
	
	    n += phase;
	    if (distortion != 0.0) {
	        n = n + (distortion * hashNoise3(point_in) * 2.0 - 1.0);
	    }
	
	    /*-Profile: sine */
	    if (profile == 0) {
	        return 0.5 + 0.5 * sin(n - TAU);
	    }
	
	    /*-Profile: saw */
	    else if (profile == 1) {
	        n /= TAU ;
	        return n - floor(n);
	    }
	
	    else {
	        n /= TAU;
	        return abs(n - floor(n + 0.5)) * 2.0;
	    }
	}
"
graph_offset = Vector2(-393.323, -65.0687)
nodes/fragment/2/node = SubResource("VisualShaderNodeGlobalExpression_e3fx6")
nodes/fragment/2/position = Vector2(-500, -480)
nodes/fragment/2/size = Vector2(1120.91, 467.261)
nodes/fragment/2/input_ports = ""
nodes/fragment/2/output_ports = ""
nodes/fragment/2/expression = "const float TAU = 6.28318530718;

/* Generic Noise 3 (hash based) by PatricioGonzalezVivo
@ https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
|----------------------------------------------------------------*/
float hash(float n) {
	return fract(sin(n) * 1e4);
	}
/*<https://www.shadertoy.com/view/4dS3Wd>
By Morgan McGuire @morgan3d, http://graphicscodex.com*/

float hashNoise3(vec3 x) {
	const vec3 step = vec3(110, 241, 171);

	vec3 i = floor(x);
	vec3 f = fract(x);
 
    float n = dot(i, step);

	vec3 u = f * f * (3.0 - 2.0 * f);
	return mix(mix(mix( hash(n + dot(step, vec3(0, 0, 0))), hash(n + dot(step, vec3(1, 0, 0))), u.x),
                   mix( hash(n + dot(step, vec3(0, 1, 0))), hash(n + dot(step, vec3(1, 1, 0))), u.x), u.y),
               mix(mix( hash(n + dot(step, vec3(0, 0, 1))), hash(n + dot(step, vec3(1, 0, 1))), u.x),
                   mix( hash(n + dot(step, vec3(0, 1, 1))), hash(n + dot(step, vec3(1, 1, 1))), u.x), u.y), u.z);
}


/* === Based on The Blender Foundation shader
@ https://git.blender.org/gitweb/gitweb.cgi/blender.git/blob/HEAD:/source/blender/gpu/shaders/material/gpu_shader_material_tex_wave.glsl
______________________________________________________________________________________________________________________________________*/

/* [ type = 0 (rings) | type = 1 (bands) ], [ profile = 0 (sine) | profile = 1 (saw) | profile = 2 (triangle) ] */
float waveTexture(vec3 point_in, float scale, int type, float distortion, float phase, int profile) {
    point_in = (point_in + 0.000001) * 0.999999; //prevent precision issues on unit coordinates
    point_in = (scale != 0.0) ? (point_in * scale) : point_in;
    float n = 0.0;

    /*-Type: rings (Spherical) */
    if (type == 0) {
        vec3 rp = point_in;
        n = length(rp) * 20.0;
    }
    /*-Type: bands (Diagonal)*/
    else if (type == 1) {
        n = (point_in.x + point_in.y + point_in.z) * 10.0;
    }

    n += phase;
    if (distortion != 0.0) {
        n = n + (distortion * hashNoise3(point_in) * 2.0 - 1.0);
    }

    /*-Profile: sine */
    if (profile == 0) {
        return 0.5 + 0.5 * sin(n - TAU);
    }

    /*-Profile: saw */
    else if (profile == 1) {
        n /= TAU ;
        return n - floor(n);
    }

    else {
        n /= TAU;
        return abs(n - floor(n + 0.5)) * 2.0;
    }
}"
nodes/fragment/3/node = SubResource("VisualShaderNodeExpression_2ofno")
nodes/fragment/3/position = Vector2(-591.673, 336.357)
nodes/fragment/3/size = Vector2(250, 150)
nodes/fragment/3/input_ports = "0,4,input0;1,0,input1;2,0,input2;3,0,input3;4,0,input4;5,0,input5;"
nodes/fragment/3/output_ports = "0,4,output0;"
nodes/fragment/3/expression = ""

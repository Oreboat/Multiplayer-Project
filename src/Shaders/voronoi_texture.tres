[gd_resource type="VisualShader" load_steps=9 format=3 uid="uid://c63qjmnobter2"]

[sub_resource type="VisualShaderNodeGlobalExpression" id="VisualShaderNodeGlobalExpression_cqo4f"]
size = Vector2(835.792, 410.928)
expression = "/* Generic Noise 3 by PatricioGonzalezVivo
@ https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
|----------------------------------------------------------------*/
vec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
vec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}

float noise3(vec3 p){
    vec3 a = floor(p);
    vec3 d = p - a;
    d = d * d * (3.0 - 2.0 * d);

    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);
    vec4 k1 = perm(b.xyxy);
    vec4 k2 = perm(k1.xyxy + b.zzww);

    vec4 c = k2 + a.zzzz;
    vec4 k3 = perm(c);
    vec4 k4 = perm(c + 1.0);

    vec4 o1 = fract(k3 * (1.0 / 41.0));
    vec4 o2 = fract(k4 * (1.0 / 41.0));

    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);
    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);

    return o4.y * d.y + o4.x * (1.0 - d.y);
}


/* === Based on The Blender Foundation shader
@ https://git.blender.org/gitweb/gitweb.cgi/blender.git/blob/HEAD:/source/blender/gpu/shaders/material/gpu_shader_material_tex_voronoi.glsl
_________________________________________________________________________________________________________________________________________*/

/*_ Voronoi func _*/

float smoothVoronoi(vec3 coords, float scale, float randomness, float smoothness) {
    randomness = clamp(randomness, 0.0, 1.0);
    smoothness = clamp(smoothness/2.0,  0.0, 0.5);
    vec3 cell_position = floor(coords * scale);
    vec3 local_position = (coords * scale) - floor(coords * scale);

    float smooth_distance = 8.0;
    vec3 smooth_position = vec3(0.0);

    for (int k = -2; k <= 2; k++) {
        for (int j = -2; j <= 2; j++) {
            for (int i = -2; i <= 2; i++) {
                
                vec3 cell_offset = vec3(float(i), float(j), float(k));
                vec3 point_position = cell_offset + noise3(cell_position + cell_offset) * randomness;
                float distance_to_point = distance(point_position, local_position);
                float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (smooth_distance - distance_to_point) / smoothness);
                float correction_factor = smoothness * h * (1.0 - h);
                smooth_distance = mix(smooth_distance, distance_to_point, h) - correction_factor;

            }
        }
    }
    return smooth_distance;
}"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_ra4ay"]
input_name = "view_matrix"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_k8xam"]
input_name = "vertex"

[sub_resource type="VisualShaderNodeTransformVecMult" id="VisualShaderNodeTransformVecMult_d1igg"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_tff0j"]
constant = 10.0

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_c8uog"]

[sub_resource type="VisualShaderNodeFloatConstant" id="VisualShaderNodeFloatConstant_qdq58"]
constant = 51.0

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_omfw6"]
size = Vector2(438.64, 341.28)
expression = "Fac = smoothVoronoi(Vector, Scale, Randomness, Smoothness);"

[resource]
code = "shader_type spatial;


// GlobalExpression:0
	/* Generic Noise 3 by PatricioGonzalezVivo
	@ https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
	|----------------------------------------------------------------*/
	vec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
	vec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}
	
	float noise3(vec3 p){
	    vec3 a = floor(p);
	    vec3 d = p - a;
	    d = d * d * (3.0 - 2.0 * d);
	
	    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);
	    vec4 k1 = perm(b.xyxy);
	    vec4 k2 = perm(k1.xyxy + b.zzww);
	
	    vec4 c = k2 + a.zzzz;
	    vec4 k3 = perm(c);
	    vec4 k4 = perm(c + 1.0);
	
	    vec4 o1 = fract(k3 * (1.0 / 41.0));
	    vec4 o2 = fract(k4 * (1.0 / 41.0));
	
	    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);
	    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);
	
	    return o4.y * d.y + o4.x * (1.0 - d.y);
	}
	
	
	/* === Based on The Blender Foundation shader
	@ https://git.blender.org/gitweb/gitweb.cgi/blender.git/blob/HEAD:/source/blender/gpu/shaders/material/gpu_shader_material_tex_voronoi.glsl
	_________________________________________________________________________________________________________________________________________*/
	
	/*_ Voronoi func _*/
	
	float smoothVoronoi(vec3 coords, float scale, float randomness, float smoothness) {
	    randomness = clamp(randomness, 0.0, 1.0);
	    smoothness = clamp(smoothness/2.0,  0.0, 0.5);
	    vec3 cell_position = floor(coords * scale);
	    vec3 local_position = (coords * scale) - floor(coords * scale);
	
	    float smooth_distance = 8.0;
	    vec3 smooth_position = vec3(0.0);
	
	    for (int k = -2; k <= 2; k++) {
	        for (int j = -2; j <= 2; j++) {
	            for (int i = -2; i <= 2; i++) {
	                
	                vec3 cell_offset = vec3(float(i), float(j), float(k));
	                vec3 point_position = cell_offset + noise3(cell_position + cell_offset) * randomness;
	                float distance_to_point = distance(point_position, local_position);
	                float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (smooth_distance - distance_to_point) / smoothness);
	                float correction_factor = smoothness * h * (1.0 - h);
	                smooth_distance = mix(smooth_distance, distance_to_point, h) - correction_factor;
	
	            }
	        }
	    }
	    return smooth_distance;
	}

void fragment() {
// Input:3
	mat4 n_out3p0 = VIEW_MATRIX;


// Input:4
	vec3 n_out4p0 = VERTEX;


// TransformVectorMult:5
	vec3 n_out5p0 = (n_out3p0 * vec4(n_out4p0, 1.0)).xyz;


// FloatConstant:6
	float n_out6p0 = 10.000000;


// FloatConstant:8
	float n_out8p0 = 51.000000;


// FloatConstant:7
	float n_out7p0 = 0.000000;


	float n_out9p0;
// Expression:9
	n_out9p0 = 0.0;
	{
		n_out9p0 = smoothVoronoi(n_out5p0, n_out6p0, n_out8p0, n_out7p0);
	}


// Output:0
	ALBEDO = vec3(n_out9p0);


}
"
graph_offset = Vector2(-694.494, -10.2997)
nodes/fragment/0/position = Vector2(420, 260)
nodes/fragment/2/node = SubResource("VisualShaderNodeGlobalExpression_cqo4f")
nodes/fragment/2/position = Vector2(-1420, -240)
nodes/fragment/2/size = Vector2(835.792, 410.928)
nodes/fragment/2/input_ports = ""
nodes/fragment/2/output_ports = ""
nodes/fragment/2/expression = "/* Generic Noise 3 by PatricioGonzalezVivo
@ https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83
|----------------------------------------------------------------*/
vec4 mod289(vec4 x){return x - floor(x * (1.0 / 289.0)) * 289.0;}
vec4 perm(vec4 x){return mod289(((x * 34.0) + 1.0) * x);}

float noise3(vec3 p){
    vec3 a = floor(p);
    vec3 d = p - a;
    d = d * d * (3.0 - 2.0 * d);

    vec4 b = a.xxyy + vec4(0.0, 1.0, 0.0, 1.0);
    vec4 k1 = perm(b.xyxy);
    vec4 k2 = perm(k1.xyxy + b.zzww);

    vec4 c = k2 + a.zzzz;
    vec4 k3 = perm(c);
    vec4 k4 = perm(c + 1.0);

    vec4 o1 = fract(k3 * (1.0 / 41.0));
    vec4 o2 = fract(k4 * (1.0 / 41.0));

    vec4 o3 = o2 * d.z + o1 * (1.0 - d.z);
    vec2 o4 = o3.yw * d.x + o3.xz * (1.0 - d.x);

    return o4.y * d.y + o4.x * (1.0 - d.y);
}


/* === Based on The Blender Foundation shader
@ https://git.blender.org/gitweb/gitweb.cgi/blender.git/blob/HEAD:/source/blender/gpu/shaders/material/gpu_shader_material_tex_voronoi.glsl
_________________________________________________________________________________________________________________________________________*/

/*_ Voronoi func _*/

float smoothVoronoi(vec3 coords, float scale, float randomness, float smoothness) {
    randomness = clamp(randomness, 0.0, 1.0);
    smoothness = clamp(smoothness/2.0,  0.0, 0.5);
    vec3 cell_position = floor(coords * scale);
    vec3 local_position = (coords * scale) - floor(coords * scale);

    float smooth_distance = 8.0;
    vec3 smooth_position = vec3(0.0);

    for (int k = -2; k <= 2; k++) {
        for (int j = -2; j <= 2; j++) {
            for (int i = -2; i <= 2; i++) {
                
                vec3 cell_offset = vec3(float(i), float(j), float(k));
                vec3 point_position = cell_offset + noise3(cell_position + cell_offset) * randomness;
                float distance_to_point = distance(point_position, local_position);
                float h = smoothstep(0.0, 1.0, 0.5 + 0.5 * (smooth_distance - distance_to_point) / smoothness);
                float correction_factor = smoothness * h * (1.0 - h);
                smooth_distance = mix(smooth_distance, distance_to_point, h) - correction_factor;

            }
        }
    }
    return smooth_distance;
}"
nodes/fragment/3/node = SubResource("VisualShaderNodeInput_ra4ay")
nodes/fragment/3/position = Vector2(-2237.48, 393.306)
nodes/fragment/4/node = SubResource("VisualShaderNodeInput_k8xam")
nodes/fragment/4/position = Vector2(-2277.48, 553.306)
nodes/fragment/5/node = SubResource("VisualShaderNodeTransformVecMult_d1igg")
nodes/fragment/5/position = Vector2(-1937.48, 493.306)
nodes/fragment/6/node = SubResource("VisualShaderNodeFloatConstant_tff0j")
nodes/fragment/6/position = Vector2(-1697.48, 413.306)
nodes/fragment/7/node = SubResource("VisualShaderNodeFloatConstant_c8uog")
nodes/fragment/7/position = Vector2(-1697.48, 533.306)
nodes/fragment/8/node = SubResource("VisualShaderNodeFloatConstant_qdq58")
nodes/fragment/8/position = Vector2(-1697.48, 473.306)
nodes/fragment/9/node = SubResource("VisualShaderNodeExpression_omfw6")
nodes/fragment/9/position = Vector2(-1417.48, 313.306)
nodes/fragment/9/size = Vector2(438.64, 341.28)
nodes/fragment/9/input_ports = "0,4,Vector;1,0,Scale;2,0,Randomness;3,0,Smoothness;"
nodes/fragment/9/output_ports = "0,0,Fac;"
nodes/fragment/9/expression = "Fac = smoothVoronoi(Vector, Scale, Randomness, Smoothness);"
nodes/fragment/connections = PackedInt32Array(6, 0, 9, 1, 8, 0, 9, 2, 7, 0, 9, 3, 9, 0, 0, 0, 4, 0, 5, 1, 5, 0, 9, 0, 3, 0, 5, 0)
